AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: AQA application - prediction score on user uploaded videos

Resources:
  ## S3 bucket - for storing user uploaded videos
  S3UploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
            - "*"
          AllowedMethods:
            - GET
            - PUT
            - HEAD
          AllowedOrigins:
            - "*"

  ## HTTP API - get user uploaded videos basic info
  MyApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      # CORS configuration - this is open for development only and should be restricted in prod.
      # See https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-httpapi-httpapicorsconfiguration.html   
      CorsConfiguration:
        AllowMethods:
          - GET
          - POST
          - DELETE
          - OPTIONS
        AllowHeaders:
          - "*"
        AllowOrigins: 
          - "*"      

  ## Lambda functions
  # UploadRequestFunction -
  # when receiving a GET request from MyApi, generate a presigned URL to put-object in S3 
  # for later PUT request to use
  UploadRequestFunction:
    # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: getSignedURL/
      Handler: app.handler
      Runtime: python3.7
      Timeout: 3
      MemorySize: 128
      Environment:
        Variables:
          UploadBucket: !Ref S3UploadBucket  
      Policies:
        - S3WritePolicy:
            BucketName: !Ref S3UploadBucket
        ## This permission allows the Lambda function to request signed URLs
        ## for objects that will be publicly readable. Uncomment if you want this ACL.
        # - Statement:
        #   - Effect: Allow
        #     Resource: !Sub 'arn:aws:s3:::${S3UploadBucket}/'
        #     Action:
        #       - s3:putObjectAcl
      Events:
        UploadAssetAPI:
          Type: HttpApi
          Properties:
            Path: /uploads
            Method: get
            ApiId: !Ref MyApi  
  
  # ProcessPredictFunction -
  # triggered by S3 object creation event
  # TODO: download object from S3, process the video and make prediction
  ProcessPredictFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      PackageType: Image
      CodeUri: getPredScore/
      Description: >-
        An Amazon S3 trigger that retrieves metadata for the object that has
        been updated, download the object and make prediction score
      Timeout: 600
      MemorySize: 4096
      Policies:
        - AmazonS3ReadOnlyAccess
        - AmazonDynamoDBFullAccess
      Events:
        BucketEvent1:
          Type: S3
          Properties:
            Bucket: !Ref S3UploadBucket
            Events:
              - 's3:ObjectCreated:*'
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./getPredScore
      DockerTag: python3.7-v1
  

## Take a note of the outputs for deploying the workflow templates in this sample application
Outputs:
  UploadAssetAPI:
    Description: "HTTP API endpoint URL to get pre-signed URL for uploads"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/uploads"
  S3UploadBucketName:
    Description: "S3 bucket for application uploads"
    Value: !Ref 'S3UploadBucket'
  UploadRequestFunction:
    Description: "UploadRequest Lambda Function ARN"
    Value: !GetAtt UploadRequestFunction.Arn
  UploadRequestFunctionIamRole:
    Description: "Implicit IAM Role created for UploadRequest function"
    Value: !GetAtt UploadRequestFunctionRole.Arn
  ProcessPredictFunction:
    Description: "ProcessPredict Lambda Function ARN"
    Value: !GetAtt ProcessPredictFunction.Arn
  ProcessPredictFunctionIamRole:
    Description: "Implicit IAM Role created for ProcessPredict function"
    Value: !GetAtt ProcessPredictFunctionRole.Arn

